// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for future multi-user support
model User {
  id                String      @id @default(uuid())
  email             String      @unique
  password          String
  name              String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?
  isActive          Boolean     @default(true)
  
  // Relations
  periods           Period[]
  cycles            Cycle[]
  predictions       Prediction[]
  settings          Settings?
  
  @@index([email])
}

// Period model - tracks individual period occurrences
model Period {
  id                String      @id @default(uuid())
  userId            String
  startDate         DateTime
  endDate           DateTime?
  flowIntensity     FlowIntensity @default(MEDIUM)
  symptoms          String[]    @default([])
  notes             String?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle             Cycle?      @relation(fields: [cycleId], references: [id])
  cycleId           String?
  
  @@index([userId, startDate])
  @@index([startDate])
}

// Cycle model - represents complete menstrual cycles
model Cycle {
  id                String      @id @default(uuid())
  userId            String
  startDate         DateTime
  endDate           DateTime?
  cycleLength       Int?        // Days between period start dates
  periodLength      Int?        // Days of bleeding
  ovulationDate     DateTime?
  lutealPhaseLength Int?        // Days from ovulation to next period
  isComplete        Boolean     @default(false)
  isRegular         Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  periods           Period[]
  
  @@index([userId, startDate])
}

// Prediction model - stores predicted dates and confidence levels
model Prediction {
  id                String      @id @default(uuid())
  userId            String
  type              PredictionType
  startDate         DateTime
  endDate           DateTime?
  confidence        Int         // Confidence percentage (0-100)
  metadata          Json?       // Additional prediction metadata
  algorithm         String      @default("weighted_average")
  basedOnCycles     Int         @default(0) // Number of cycles used for prediction
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  actualDate        DateTime?   // For tracking accuracy
  accuracyDays      Int?        // Days difference between predicted and actual
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type, startDate])
  @@index([userId, startDate])
  @@index([type])
}

// Settings model - user preferences and app configuration
model Settings {
  id                String      @id @default(uuid())
  userId            String      @unique
  cycleLength       Int         @default(28) // Default cycle length
  periodLength      Int         @default(5)  // Default period length
  lutealPhaseLength Int         @default(14) // Default luteal phase
  reminderDays      Int[]       @default([2]) // Days before period to remind
  enableReminders   Boolean     @default(true)
  enablePredictions Boolean     @default(true)
  theme             Theme       @default(LIGHT)
  language          String      @default("en")
  timezone          String      @default("UTC")
  privacyMode       Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum FlowIntensity {
  LIGHT
  MEDIUM
  HEAVY
  SPOTTING
  NO_PERIOD
}

enum PredictionType {
  PERIOD
  OVULATION
  FERTILE_WINDOW
}


enum Theme {
  LIGHT
  DARK
  AUTO
}